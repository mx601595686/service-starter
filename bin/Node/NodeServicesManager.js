"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseServicesManager_1 = require("../common/BaseServicesManager");
const RunningStatus_1 = require("../common/RunningStatus");
const log_formatter_1 = require("log-formatter");
/**
 * 在BaseServicesManager的基础上添加了全局未捕获异常处理，退出信号控制，
 * 通过process.on('message')的方式进行健康检查（发送__ss__healthCheck调用健康检查，
 * { isHealth: boolean, description: string, type='healthCheck' }返回检查结果）。
 *
 * @export
 * @class NodeServicesManager
 * @extends {BaseServicesManager}
 */
class NodeServicesManager extends BaseServicesManager_1.BaseServicesManager {
    constructor(_config = {}) {
        super();
        this._config = _config;
        process.on('unhandledRejection', this.onUnHandledException.bind(this));
        process.on('uncaughtException', this.onUnHandledException.bind(this));
        let forceClose = false; //用于标记是否强制退出程序
        const signalClose = () => {
            if (this.status !== RunningStatus_1.RunningStatus.stopping) {
                if (this.status === RunningStatus_1.RunningStatus.stopped) {
                    process.exit();
                }
                else {
                    this.stop();
                }
            }
            else {
                if (forceClose === false) {
                    log_formatter_1.default.noTime.title.text.gray.round('正在停止程序，请稍后。。。', '如果要强制退出，请在3秒钟之内再次点击');
                    forceClose = true;
                    setTimeout(() => forceClose = false, 3000);
                }
                else {
                    process.exit();
                }
            }
        };
        process.on('SIGTERM', () => {
            if (_config.stopOnHaveSIGTERM !== false) {
                signalClose();
            }
        });
        process.on('SIGINT', () => {
            if (_config.stopOnHaveSIGINT !== false) {
                signalClose();
            }
        });
        if (process.connected) {
            const listener = async (message) => {
                if (message === '__ss__healthCheck') {
                    const result = await this.healthCheck();
                    result.type = 'healthCheck';
                    process.send && process.send(result);
                }
            };
            process.on('message', listener);
            process.once('disconnect', () => {
                process.removeListener('message', listener);
            });
        }
        if (_config.exitAfterStopped !== false)
            this.on('stopped', () => process.exit());
    }
    onError(errName, err, service) {
        super.onError(errName, err, service);
        if (this._config.stopOnError !== false) {
            if (this.status !== RunningStatus_1.RunningStatus.stopping) {
                if (this.status === RunningStatus_1.RunningStatus.stopped) {
                    process.exit(1);
                }
                else {
                    this.stop(1);
                }
            }
        }
    }
    onUnHandledException(err) {
        super.onUnHandledException(err);
        if (this._config.stopOnUnHandledException !== false) {
            if (this.status !== RunningStatus_1.RunningStatus.stopping) {
                if (this.status === RunningStatus_1.RunningStatus.stopped) {
                    process.exit(1);
                }
                else {
                    this.stop(1);
                }
            }
        }
    }
}
exports.NodeServicesManager = NodeServicesManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
