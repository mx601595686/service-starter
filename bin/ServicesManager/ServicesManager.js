"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("events");
const http = require("http");
const fs = require("fs-extra");
const RegisteredService_1 = require("./RegisteredService");
const Log_1 = require("../Log");
const HealthStatus_1 = require("../ServiceModule/HealthStatus");
/**
 * 服务管理器
 *
 * @export
 * @class ServicesManager
 * @extends {events.EventEmitter}
 */
class ServicesManager extends events.EventEmitter {
    constructor(config = {}) {
        super();
        this._isStarted = false; //是否已经启动
        /**
         * 注册的服务列表。(服务只应当通过registerService来进行注册)
         *
         * key是服务名称
         */
        this._services = new Map();
        if (ServicesManager._servicesManagerCreated)
            throw new Error(`${this.name}已经被创建了`);
        ServicesManager._servicesManagerCreated = true;
        process.on('unhandledRejection', (err) => {
            Log_1.log.e('程序出现未捕捉Promise异常：', err);
            if (config.stopOnHaveUnhandledRejection !== false) {
                this.stop(1);
            }
        });
        process.on('uncaughtException', (err) => {
            Log_1.log.e('程序出现未捕捉异常：', err);
            if (config.stopOnHaveUncaughtException !== false) {
                this.stop(1);
            }
        });
        process.on('SIGTERM', () => {
            if (config.stopOnHaveSIGTERM !== false) {
                this.stop();
            }
        });
        process.on('SIGINT', () => {
            if (config.stopOnHaveSIGINT !== false) {
                this.stop();
            }
        });
        //配置健康检查服务
        if (config.startHealthChecking !== false) {
            //要被监听的端口
            const port = "/tmp/service_starter_health_checking.sock";
            //删除之前的接口，避免被占用
            fs.removeSync(port);
            http.createServer(async (req, res) => {
                //log.l('接收到健康检查请求');
                let result = HealthStatus_1.HealthStatus.success;
                //检查每一个服务的健康状况
                for (let item of this._services.values()) {
                    //跳过未启动的服务
                    if (!item.isStarted)
                        continue;
                    try {
                        const status = await item.service.onHealthChecking();
                        if (status != HealthStatus_1.HealthStatus.success) {
                            Log_1.log.w('服务', item.name, '的运行健康状况出现不正常：', status);
                            result = status;
                            break;
                        }
                    }
                    catch (error) {
                        result = HealthStatus_1.HealthStatus.unhealthy;
                        Log_1.log.e('服务', item.name, '在进行健康检查时发生异常', error);
                        break;
                    }
                }
                res.end(result.toString());
            }).listen(port, (err) => {
                if (err) {
                    Log_1.log.e(this.name, '健康检查服务启动失败：', err);
                    process.exit(1);
                }
            });
        }
    }
    /**
     * ServicesManager 的名称，默认是类名。
     */
    get name() {
        return this.constructor.name;
    }
    /**
     * 启动所有注册的服务。按照注册的先后顺序来启动服务。先注册的服务先启动。
     * 如果启动过程中某个服务出现异常，则后面的服务则不再被启动，之前启动过了的服务也会被依次关闭（按照从后向前的顺序）。
     * 启动结束后会触发started事件
     *
     * @memberof ServicesManager
     */
    start() {
        //确保不会重复启动
        if (this._isStarted !== false)
            return;
        Log_1.log.l(this.name, '开始启动服务');
        this._isStarted = true;
        (async () => {
            for (let item of this._services.values()) {
                //避免重复启动
                if (item.isStarted === true)
                    continue;
                try {
                    Log_1.log.starting('开始启动', item.name);
                    item.isStarted = true;
                    await item.service.onStart();
                    Log_1.log.started('启动成功', item.name);
                }
                catch (error) {
                    Log_1.log.startFailed('启动失败', item.name, error);
                    this.stop(1);
                    return;
                }
            }
            Log_1.log.l('所有服务已启动');
            this.emit('started');
        })();
    }
    /**
     * 关闭所有已启动的服务。先注册的服务最后被关闭。当所有服务都被关闭后程序将会被退出。
     * 当所有服务都停止后出发stopped事件
     *
     * @param exitCode 程序退出状态码。 1是系统错误 2是用户ServiceModule的onError发出的‘stop’信号
     */
    stop(exitCode = 0) {
        //确保不会重复关闭
        if (this._isStarted !== true)
            return;
        Log_1.log.l(this.name, '开始停止服务');
        this._isStarted = false;
        (async () => {
            for (let item of Array.from(this._services.values()).reverse()) {
                //只关闭已启动了的服务
                if (item.isStarted === false)
                    continue;
                try {
                    Log_1.log.stopping('开始停止', item.name);
                    item.isStarted = false;
                    await item.service.onStop();
                    Log_1.log.stopped('停止成功', item.name);
                }
                catch (error) {
                    Log_1.log.stopFailed('停止失败', item.name, error);
                }
            }
            Log_1.log.l('所有服务已停止');
            this.emit('stopped');
            //退出服务
            process.exit(exitCode);
        })();
    }
    /**
     * 注册服务
     *
     * @param {ServiceModule} serviceModule 服务模块实例
     * @memberof ServicesManager
     */
    registerService(serviceModule) {
        if (this._services.has(serviceModule.name)) {
            throw new Error(`服务'${serviceModule.name}'已注册过了`);
        }
        else {
            this._services.set(serviceModule.name, new RegisteredService_1.RegisteredService(serviceModule, this));
        }
    }
    /**
     * 服务运行过程中的错误处理方法。服务启动或关闭过程中产生的错误不会触发该方法。
     *
     * @param {Error} err
     * @param {ServiceModule} service 发生错误的服务实例
     * @memberof ServicesManager
     */
    onError(err, service) {
        Log_1.log.e(service.name, '发生错误：', err);
    }
}
ServicesManager._servicesManagerCreated = false; //ServicesManager是否已经创建了（一个进程只允许创建一个ServicesManager）
exports.ServicesManager = ServicesManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlcnZpY2VzTWFuYWdlci9TZXJ2aWNlc01hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBa0M7QUFDbEMsNkJBQThCO0FBQzlCLCtCQUFnQztBQUVoQywyREFBd0Q7QUFDeEQsZ0NBQTZCO0FBRTdCLGdFQUE2RDtBQUc3RDs7Ozs7O0dBTUc7QUFDSCxxQkFBNkIsU0FBUSxNQUFNLENBQUMsWUFBWTtJQW1CcEQsWUFBWSxTQUFnQyxFQUFFO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBbEJKLGVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBSSxRQUFRO1FBVXZDOzs7O1dBSUc7UUFDTSxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUE7UUFLckQsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDO1lBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDO1FBQ25GLGVBQWUsQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFFL0MsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLEdBQVU7WUFDeEMsU0FBRyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVoQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsR0FBVTtZQUN2QyxTQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQztZQUV6QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDL0MsSUFBSSxDQUFDLElB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QUtHO0lBQ0gsZUFBZSxDQUFDLGFBQTRCO1FBQ3hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLGFBQWEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxxQ0FBaUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN2RixDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE9BQU8sQ0FBQyxHQUFVLEVBQUUsT0FBc0I7UUFDdEMsU0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0QyxDQUFDOztBQTFMYyx1Q0FBdUIsR0FBRyxLQUFLLENBQUMsQ0FBQyxvREFBb0Q7QUFIeEcsMENBOExDIiwiZmlsZSI6IlNlcnZpY2VzTWFuYWdlci9TZXJ2aWNlc01hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5pbXBvcnQgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5cbmltcG9ydCB7IFJlZ2lzdGVyZWRTZXJ2aWNlIH0gZnJvbSAnLi9SZWdpc3RlcmVkU2VydmljZSc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi9Mb2cnO1xuaW1wb3J0IHsgU2VydmljZU1vZHVsZSB9IGZyb20gXCIuLi9TZXJ2aWNlTW9kdWxlL1NlcnZpY2VNb2R1bGVcIjtcbmltcG9ydCB7IEhlYWx0aFN0YXR1cyB9IGZyb20gXCIuLi9TZXJ2aWNlTW9kdWxlL0hlYWx0aFN0YXR1c1wiO1xuaW1wb3J0IHsgU2VydmljZXNNYW5hZ2VyQ29uZmlnIH0gZnJvbSBcIi4vU2VydmljZXNNYW5hZ2VyQ29uZmlnXCI7XG5cbi8qKlxuICog5pyN5Yqh566h55CG5ZmoXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBTZXJ2aWNlc01hbmFnZXJcbiAqIEBleHRlbmRzIHtldmVudHMuRXZlbnRFbWl0dGVyfVxuICovXG5leHBvcnQgY2xhc3MgU2VydmljZXNNYW5hZ2VyIGV4dGVuZHMgZXZlbnRzLkV2ZW50RW1pdHRlciB7XG5cbiAgICBwcml2YXRlIF9pc1N0YXJ0ZWQgPSBmYWxzZTsgICAgLy/mmK/lkKblt7Lnu4/lkK/liqhcbiAgICBwcml2YXRlIHN0YXRpYyBfc2VydmljZXNNYW5hZ2VyQ3JlYXRlZCA9IGZhbHNlOyAvL1NlcnZpY2VzTWFuYWdlcuaYr+WQpuW3sue7j+WIm+W7uuS6hu+8iOS4gOS4qui/m+eoi+WPquWFgeiuuOWIm+W7uuS4gOS4qlNlcnZpY2VzTWFuYWdlcu+8iVxuXG4gICAgLyoqXG4gICAgICogU2VydmljZXNNYW5hZ2VyIOeahOWQjeensO+8jOm7mOiupOaYr+exu+WQjeOAglxuICAgICAqL1xuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5rOo5YaM55qE5pyN5Yqh5YiX6KGo44CCKOacjeWKoeWPquW6lOW9k+mAmui/h3JlZ2lzdGVyU2VydmljZeadpei/m+ihjOazqOWGjClcbiAgICAgKiBcbiAgICAgKiBrZXnmmK/mnI3liqHlkI3np7BcbiAgICAgKi9cbiAgICByZWFkb25seSBfc2VydmljZXMgPSBuZXcgTWFwPHN0cmluZywgUmVnaXN0ZXJlZFNlcnZpY2U+KClcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogU2VydmljZXNNYW5hZ2VyQ29uZmlnID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoU2VydmljZXNNYW5hZ2VyLl9zZXJ2aWNlc01hbmFnZXJDcmVhdGVkKSB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpcy5uYW1lfeW3sue7j+iiq+WIm+W7uuS6hmApO1xuICAgICAgICBTZXJ2aWNlc01hbmFnZXIuX3NlcnZpY2VzTWFuYWdlckNyZWF0ZWQgPSB0cnVlO1xuXG4gICAgICAgIHByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICBsb2cuZSgn56iL5bqP5Ye6546w5pyq5o2V5o2JUHJvbWlzZeW8guW4uO+8micsIGVycik7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuc3RvcE9uSGF2ZVVuaGFuZGxlZFJlamVjdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgIGxvZy5lKCfnqIvluo/lh7rnjrDmnKrmjZXmjYnlvILluLjvvJonLCBlcnIpO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLnN0b3BPbkhhdmVVbmNhdWdodEV4Y2VwdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHByb2Nlc3Mub24oJ1NJR1RFUk0nLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnN0b3BPbkhhdmVTSUdURVJNICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBwcm9jZXNzLm9uKCdTSUdJTlQnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnN0b3BPbkhhdmVTSUdJTlQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8v6YWN572u5YGl5bq35qOA5p+l5pyN5YqhXG4gICAgICAgIGlmIChjb25maWcuc3RhcnRIZWFsdGhDaGVja2luZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8v6KaB6KKr55uR5ZCs55qE56uv5Y+jXG4gICAgICAgICAgICBjb25zdCBwb3J0ID0gXCIvdG1wL3NlcnZpY2Vfc3RhcnRlcl9oZWFsdGhfY2hlY2tpbmcuc29ja1wiO1xuXG4gICAgICAgICAgICAvL+WIoOmZpOS5i+WJjeeahOaOpeWPo++8jOmBv+WFjeiiq+WNoOeUqFxuICAgICAgICAgICAgZnMucmVtb3ZlU3luYyhwb3J0KTtcblxuICAgICAgICAgICAgaHR0cC5jcmVhdGVTZXJ2ZXIoYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgLy9sb2cubCgn5o6l5pS25Yiw5YGl5bq35qOA5p+l6K+35rGCJyk7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IEhlYWx0aFN0YXR1cy5zdWNjZXNzO1xuXG4gICAgICAgICAgICAgICAgLy/mo4Dmn6Xmr4/kuIDkuKrmnI3liqHnmoTlgaXlurfnirblhrVcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX3NlcnZpY2VzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v6Lez6L+H5pyq5ZCv5Yqo55qE5pyN5YqhXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXRlbS5pc1N0YXJ0ZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBpdGVtLnNlcnZpY2Uub25IZWFsdGhDaGVja2luZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyAhPSBIZWFsdGhTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy53KCfmnI3liqEnLCBpdGVtLm5hbWUsICfnmoTov5DooYzlgaXlurfnirblhrXlh7rnjrDkuI3mraPluLjvvJonLCBzdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEhlYWx0aFN0YXR1cy51bmhlYWx0aHk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZSgn5pyN5YqhJywgaXRlbS5uYW1lLCAn5Zyo6L+b6KGM5YGl5bq35qOA5p+l5pe25Y+R55Sf5byC5bi4JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXMuZW5kKHJlc3VsdC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pLmxpc3Rlbihwb3J0LCAoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmUodGhpcy5uYW1lLCAn5YGl5bq35qOA5p+l5pyN5Yqh5ZCv5Yqo5aSx6LSl77yaJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5ZCv5Yqo5omA5pyJ5rOo5YaM55qE5pyN5Yqh44CC5oyJ54Wn5rOo5YaM55qE5YWI5ZCO6aG65bqP5p2l5ZCv5Yqo5pyN5Yqh44CC5YWI5rOo5YaM55qE5pyN5Yqh5YWI5ZCv5Yqo44CCICAgICBcbiAgICAgKiDlpoLmnpzlkK/liqjov4fnqIvkuK3mn5DkuKrmnI3liqHlh7rnjrDlvILluLjvvIzliJnlkI7pnaLnmoTmnI3liqHliJnkuI3lho3ooqvlkK/liqjvvIzkuYvliY3lkK/liqjov4fkuobnmoTmnI3liqHkuZ/kvJrooqvkvp3mrKHlhbPpl63vvIjmjInnhafku47lkI7lkJHliY3nmoTpobrluo/vvInjgIIgICAgIFxuICAgICAqIOWQr+WKqOe7k+adn+WQjuS8muinpuWPkXN0YXJ0ZWTkuovku7ZcbiAgICAgKiBcbiAgICAgKiBAbWVtYmVyb2YgU2VydmljZXNNYW5hZ2VyXG4gICAgICovXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIC8v56Gu5L+d5LiN5Lya6YeN5aSN5ZCv5YqoXG4gICAgICAgIGlmICh0aGlzLl9pc1N0YXJ0ZWQgIT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgbG9nLmwodGhpcy5uYW1lLCAn5byA5aeL5ZCv5Yqo5pyN5YqhJyk7XG4gICAgICAgIHRoaXMuX2lzU3RhcnRlZCA9IHRydWU7XG5cbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5fc2VydmljZXMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvL+mBv+WFjemHjeWkjeWQr+WKqFxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzU3RhcnRlZCA9PT0gdHJ1ZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsb2cuc3RhcnRpbmcoJ+W8gOWni+WQr+WKqCcsIGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgaXRlbS5zZXJ2aWNlLm9uU3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nLnN0YXJ0ZWQoJ+WQr+WKqOaIkOWKnycsIGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLnN0YXJ0RmFpbGVkKCflkK/liqjlpLHotKUnLCBpdGVtLm5hbWUsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKDEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2cubCgn5omA5pyJ5pyN5Yqh5bey5ZCv5YqoJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3N0YXJ0ZWQnKTtcbiAgICAgICAgfSkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlhbPpl63miYDmnInlt7LlkK/liqjnmoTmnI3liqHjgILlhYjms6jlhoznmoTmnI3liqHmnIDlkI7ooqvlhbPpl63jgILlvZPmiYDmnInmnI3liqHpg73ooqvlhbPpl63lkI7nqIvluo/lsIbkvJrooqvpgIDlh7rjgIJcbiAgICAgKiDlvZPmiYDmnInmnI3liqHpg73lgZzmraLlkI7lh7rlj5FzdG9wcGVk5LqL5Lu2XG4gICAgICogXG4gICAgICogQHBhcmFtIGV4aXRDb2RlIOeoi+W6j+mAgOWHuueKtuaAgeeggeOAgiAx5piv57O757uf6ZSZ6K+vIDLmmK/nlKjmiLdTZXJ2aWNlTW9kdWxl55qEb25FcnJvcuWPkeWHuueahOKAmHN0b3DigJnkv6Hlj7dcbiAgICAgKi9cbiAgICBzdG9wKGV4aXRDb2RlID0gMCkge1xuICAgICAgICAvL+ehruS/neS4jeS8mumHjeWkjeWFs+mXrVxuICAgICAgICBpZiAodGhpcy5faXNTdGFydGVkICE9PSB0cnVlKSByZXR1cm47XG5cbiAgICAgICAgbG9nLmwodGhpcy5uYW1lLCAn5byA5aeL5YGc5q2i5pyN5YqhJyk7XG4gICAgICAgIHRoaXMuX2lzU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIEFycmF5LmZyb20odGhpcy5fc2VydmljZXMudmFsdWVzKCkpLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgICAgIC8v5Y+q5YWz6Zet5bey5ZCv5Yqo5LqG55qE5pyN5YqhXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXNTdGFydGVkID09PSBmYWxzZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsb2cuc3RvcHBpbmcoJ+W8gOWni+WBnOatoicsIGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaXNTdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGl0ZW0uc2VydmljZS5vblN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nLnN0b3BwZWQoJ+WBnOatouaIkOWKnycsIGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLnN0b3BGYWlsZWQoJ+WBnOatouWksei0pScsIGl0ZW0ubmFtZSwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG9nLmwoJ+aJgOacieacjeWKoeW3suWBnOatoicpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdzdG9wcGVkJyk7XG5cbiAgICAgICAgICAgIC8v6YCA5Ye65pyN5YqhXG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoZXhpdENvZGUpO1xuICAgICAgICB9KSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOazqOWGjOacjeWKoVxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7U2VydmljZU1vZHVsZX0gc2VydmljZU1vZHVsZSDmnI3liqHmqKHlnZflrp7kvotcbiAgICAgKiBAbWVtYmVyb2YgU2VydmljZXNNYW5hZ2VyXG4gICAgICovXG4gICAgcmVnaXN0ZXJTZXJ2aWNlKHNlcnZpY2VNb2R1bGU6IFNlcnZpY2VNb2R1bGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NlcnZpY2VzLmhhcyhzZXJ2aWNlTW9kdWxlLm5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOacjeWKoScke3NlcnZpY2VNb2R1bGUubmFtZX0n5bey5rOo5YaM6L+H5LqGYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZXJ2aWNlcy5zZXQoc2VydmljZU1vZHVsZS5uYW1lLCBuZXcgUmVnaXN0ZXJlZFNlcnZpY2Uoc2VydmljZU1vZHVsZSwgdGhpcykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pyN5Yqh6L+Q6KGM6L+H56iL5Lit55qE6ZSZ6K+v5aSE55CG5pa55rOV44CC5pyN5Yqh5ZCv5Yqo5oiW5YWz6Zet6L+H56iL5Lit5Lqn55Sf55qE6ZSZ6K+v5LiN5Lya6Kem5Y+R6K+l5pa55rOV44CCXG4gICAgICogXG4gICAgICogQHBhcmFtIHtFcnJvcn0gZXJyIFxuICAgICAqIEBwYXJhbSB7U2VydmljZU1vZHVsZX0gc2VydmljZSDlj5HnlJ/plJnor6/nmoTmnI3liqHlrp7kvotcbiAgICAgKiBAbWVtYmVyb2YgU2VydmljZXNNYW5hZ2VyXG4gICAgICovXG4gICAgb25FcnJvcihlcnI6IEVycm9yLCBzZXJ2aWNlOiBTZXJ2aWNlTW9kdWxlKSB7XG4gICAgICAgIGxvZy5lKHNlcnZpY2UubmFtZSwgJ+WPkeeUn+mUmeivr++8micsIGVycik7XG4gICAgfVxufSJdfQ==
