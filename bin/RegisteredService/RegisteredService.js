"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RunningStatus_1 = require("../RunningStatus");
const Log_1 = require("../Log");
/**
 * 对注册了的服务进行一层封装，便于ServicesManager使用。
 * 对于注册服务的生命周期进行管理。
 *
 * @class RegisteredService
 */
class RegisteredService {
    constructor(service, manager) {
        /**
         * 绑定在服务上的错误监听器。
         *
         * @type {Function}
         */
        this._errorListener = async (err) => {
            const value = await this.service.onError(err);
            switch (value) {
                case false:
                    this._manager.onError(err, this.service);
                    break;
                case true:
                    break;
                default:
                    if (value instanceof Error)
                        this._manager.onError(value, this.service);
                    break;
            }
        };
        this._status = RunningStatus_1.RunningStatus.stopped;
        this.service = service;
        this._manager = manager;
        // 给服务绑定管理器
        this.service.servicesManager = manager;
    }
    /**
     * 服务的运行状态
     */
    get status() {
        return this._status;
    }
    /**
     * 启动服务。成功返回void，失败返回Error。
     * 如果抛出异常则一定是该程序内部逻辑错误
     * 这个方法仅供内部使用。
     *
     * @returns {Promise<Error | void>}
     */
    async _start() {
        //确保只有在stopped的情况下才能执行_start
        if (this._status !== RunningStatus_1.RunningStatus.stopped) {
            throw new Error(Log_1.log.s1.format(`服务：${this.service.name}`, '在还未完全关闭的情况下又再次被启动。', `当前的状态为：${RunningStatus_1.RunningStatus[this._status]}`));
        }
        try {
            Log_1.log.s1.l(Log_1.log.chalk.blue('服务：开始启动'), this.service.name);
            this._status = RunningStatus_1.RunningStatus.starting;
            await this.service.onStart();
            this.service.on('error', this._errorListener);
            Log_1.log.s1.l(Log_1.log.chalk.green('服务：成功启动'), this.service.name);
            this._status = RunningStatus_1.RunningStatus.running;
        }
        catch (err) {
            Log_1.log.s1.e(Log_1.log.chalk.red('服务：启动失败'), this.service.name, err);
            await this._stop();
            return err;
        }
    }
    /**
     * 停止服务。
     * 如果抛出异常则一定是该程序内部逻辑错误
     * 这个方法仅供内部使用。
     */
    async _stop() {
        //确保不会重复停止
        if (this._status === RunningStatus_1.RunningStatus.stopping || this._status === RunningStatus_1.RunningStatus.stopped) {
            throw new Error(Log_1.log.s1.format(`服务：${this.service.name}`, '在处于正在停止或已停止的状态下又再次被停止。', `当前的状态为：${RunningStatus_1.RunningStatus[this._status]}`));
        }
        try {
            Log_1.log.s1.l(Log_1.log.chalk.blue('服务：开始停止'), this.service.name);
            this._status = RunningStatus_1.RunningStatus.stopping;
            await this.service.onStop();
            Log_1.log.s1.l(Log_1.log.chalk.green('服务：成功停止'), this.service.name);
        }
        catch (err) {
            Log_1.log.s1.e(Log_1.log.chalk.red('服务：停止失败'), this.service.name, err);
        }
        finally {
            this._status = RunningStatus_1.RunningStatus.stopped;
            this.service.removeListener('error', this._errorListener);
        }
    }
    /**
     * 健康检查。
     * 如果抛出异常则一定是该程序内部逻辑错误
     * 这个方法仅供内部使用。
     *
     * @returns {(Promise<Error | void>)} 健康检查出现的错误
     */
    async _healthCheck() {
        // 确保只检查运行状况下的健康状态
        if (this._status !== RunningStatus_1.RunningStatus.running) {
            throw new Error(Log_1.log.s1.format(`服务：${this.service.name}`, '在非运行状态下进行了健康检查。', `当前的状态为：${RunningStatus_1.RunningStatus[this._status]}`));
        }
        try {
            await this.service.onHealthChecking();
        }
        catch (err) {
            Log_1.log.s1.w(`服务：${this.service.name}`, '运行状况异常：', err);
            return err;
        }
    }
}
exports.RegisteredService = RegisteredService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
